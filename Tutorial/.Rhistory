print(song1)
print(song2)
get_artist <- function(object) {
UseMethod('get_artist')
}
get_artist.song <- function(object) {
return(object$artist)
}
get_artist(song1)
methods(is)
is
method(is)
methods(is)
play <- function(object) {
UseMethod('play')
}
play.song <- function(mysong) {
browseURL(mysong$link)
}
play(song1)
data()
data <- sleep
data
data <- woman
data <- women
data
iris
data <- painter
data <- painters
summary(data)
data <- iris
summary(data)
plot(data)
plot(summary(data))
data$Species
class(data$Species)
class(data$Sepal.Length)
iris
?iris
table(data)
table(data$Species)
# clear the Global Environment
rm(list=ls())
# Take the build-in data 'iris'
data <- iris
class(data$Species)
class(data$Sepal.Length)
# Try to print and plot your data.
print(data)
plot(data)
# Compare this data to
plot(randu)
# Compare this data to
plot(randu)
plot(matrix(data = rnorm(n=300),nrow = 3))
print(matrix(data = rnorm(n=300),nrow = 3))
print(matrix(data = rnorm(n=300),ncol = 3))
plot(matrix(data = rnorm(n=300),ncol = 3))
plot(data.frame('x' = rnorm(n=300), 'y' = rnorm(n=300),'z' = rnorm(n=300))
plot(data.frame('x' = rnorm(n=300), 'y' = rnorm(n=300),'z' = rnorm(n=300))
plot(data.frame('x' = rnorm(n=300), 'y' = rnorm(n=300),'z' = rnorm(n=300)))
plot(data.frame('x' = rnorm(n=500), 'y' = rnorm(n=500),'z' = rnorm(n=500)))
# Compare this data to
plot(randu)
plot(data.frame('x' = rnorm(n=500), 'y' = rnorm(n=500),'z' = rnorm(n=500)))
# Try to print and plot your data.
print(data)
plot(data)
# Try to print and plot your data.
print(data)
dev.new()
plot(data)
# Compare this data to
dev.new()
plot(randu)
dev.new()
plot(data.frame('x' = rnorm(n=500), 'y' = rnorm(n=500),'z' = rnorm(n=500)))
dev.new()
x <- rnorm(n=500, mean = 0, sd = 1)
y <- 'y' = rnorm(n=500, mean = 10, sd = 5)
plot(data.frame('x' = x, 'y' = y,'z' = x * y ))
y <- rnorm(n=500, mean = 10, sd = 5)
plot(data.frame('x' = x, 'y' = y,'z' = x * y ))
plot(data.frame('x' = x, 'y' = y,'z' = x + y ))
x <- rnorm(n=500, mean = 0, sd = 0.1)
y <- rnorm(n=500, mean = 10, sd = 5)
plot(data.frame('x' = x, 'y' = y,'z' = x + y ))
x <- rnorm(n=500, mean = 0, sd = 0.5)
y <- rnorm(n=500, mean = 10, sd = 5)
plot(data.frame('x' = x, 'y' = y,'z' = x + y ))
plot(randu)
plot(data)
# Use summarize to get some first numbers
summary(data)
table(data$Species)
table(data$Petal.Length)
plot(table(data$Petal.Length))
freq <- table(data$Petal.Length)
barplot(freq)
# and plot it using plot() or barplot()
plot(freq)
barplot(freq)
freq <- table(data$Species)
freq.PL <- table(data$Petal.Length)
plot(freq)
barplot(freq)
plot(freq.PL)
barplot(freq.PL)
my.color <- colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
my.color <- colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
# Check colors()
colors()
# Check colors()
colors()
my.color <-  c("red3","orangered" ,"yellow2", "green3","aliceblue","purple")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
my.color <-  c("red3","orangered" ,"yellow2", "green3","turquoise4","purple")
barplot(freq.PL, col = my.color)
my.color <-  c("red3","orangered" ,"yellow2", "green3","turquoise4","purple","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
my.color <-  c("tomato3" ,"orangered" ,"yellow2", "green3","turquoise4","purple","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
# Check colors()
colors()
my.color <-  c("tomato3" ,"magenta"    ,"yellow2", "green3","turquoise4","purple","violet")
freq.PL <- table(data$Petal.Length)
data <- iris
barplot(freq.PL, col = my.color)
my.color <-  c("tomato3" ,"salmon2" ,"yellow2", "green3","turquoise4","purple","violet")
data <- iris
barplot(freq.PL, col = my.color)
freq.PL <- table(data$Petal.Length)
my.color <-  c("tomato3" ,"wheat2","salmon2" ,"yellow2", "green3","turquoise4","purple","violet")
data <- iris
barplot(freq.PL, col = my.color)
freq.PL <- table(data$Petal.Length)
my.color <-  c("tomato3" ,"wheat2","salmon2" ,"peachpuff4", "green3","turquoise4","purple","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
# Check colors()
colors()
# Check colors()
colors()
my.color <-  c("tomato3" ,"blanchedalmond","wheat2","salmon2" ,"peachpuff4", "plum2" ,"turquoise4","ivory","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
# Check colors()
colors()
my.color <-  c("tomato3" ,"wheat2","salmon2" ,"peachpuff4", "plum2" ,"blanchedalmond","turquoise4","ivory","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
# Check colors()
colors()
my.color <-  c("tomato3" ,"wheat2","salmon2" ,"peachpuff4",
"plum2" ,"blanchedalmond","ivory","violet")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
# Check colors()
colors()
my.color <-  c("tomato3" ,"wheat2","salmon2" ,"peachpuff4",
"plum2" ,"blanchedalmond","ivory")
data <- iris
freq.PL <- table(data$Petal.Length)
barplot(freq.PL, col = my.color)
freq <- table(data$Species)
plot(freq.PL)
freq.PL <- table(data$Petal.Length)
barplot(freq.PL)
pie(freq)
pie(freq.PL,col = my.color)
pie(data$Species,col = my.color)
barplot(data$Sepal.Length, col = my.color)
pie(data$Species,col = my.color)
pie(table(data$Species),col = my.color)
barplot(table(data$Sepal.Length), col = my.color)
barplot((data$Sepal.Length), col = my.color)
barplot(table(data$Sepal.Length), col = my.color)
pie(table(data$Species),col = my.color)
barplot(table(data$Sepal.Length), col = my.color)
mean(data$Species)
mean(data)
mean(data$Sepal.Length)
sd(x = data$Sepal.Length)
c( mean(data$Sepal.Length), sd(x = data$Sepal.Length) )
c('mean' = mean(data$Sepal.Length),'sd' = sd(x = data$Sepal.Length) )
mean( c(1,2,3,4,NaN) )
# Use the build-in functions mean() and sd() on the Sepal.Length
c('mean' = mean(data$Sepal.Length),'sd' = sd(x = data$Sepal.Length) )
# Try
mean( c(1,2,3,4,NaN) )
mean( c(1,2,3,4,5,6) )
mean( c(1,2,3,4,NaN,6) )
mean( c(1,2,3,4,NA_real_,6) )
mean( c(1,2,3,4,NaN,6),na.rm = TRUE )
mean( c(1,2,3,4,NA,6) )
mean( c(1,2,3,4,NA,6), na.rm = TRUE )
mean( c(1,2,3,4,5,6) )
mean( c(1,2,3,4,NaN,6) )
mean(data)
lapply(X = data,FUN = mean)
lapply(X = data,FUN = mean, na.rm = TRUE)
tapply(X = data,FUN = mean, na.rm = TRUE)
tapply(X = data,FUN = mean)
tapply(X = data, data$Species ,FUN = mean)
tapply(data$Sepal.Length, data$Species ,FUN = mean)
plot(freq.PL)
barplot(freq.PL)
plot(freq.PL)
barplot(freq.PL)
pie(freq)
sapply(X = data,FUN = mean)
# compare it to list apply lappy
lapply(X = data,FUN = mean)
# and tabbly
lapply(data$Sepal.Length ,data$Species, FUN = mean)
# and tabbly
lapply(data$Sepal.Length ,data$Species, FUN = mean)
# Try the simple apply sapply
sapply(X = data,FUN = mean)
# compare it to list apply lappy
lapply(X = data,FUN = mean)
# and tabbly
lapply(data$Sepal.Length ,data$Species, FUN = mean)
# and tapply
tapply(data$Sepal.Length ,data$Species, FUN = mean)
# and tapply
tapply(data$Sepal.Length ,data$Sepal.Width, FUN = mean)
# and tapply
tapply(data$Sepal.Length ,data$Species, FUN = mean)
data <- iris
data
data <- iris$Sepal.Length
data
plot(data)
bins <- seq(1,10,by = 1)
bins
range(data)
# bundle the data in bins
data.bin <- cut(data, bins)
data.bin
plot(data.bin)
# take a look at
barplot(data.bin)
# take a look at
barplot(data.bin)
# take a look at
barplot(table(data.bin))
# bundle the data in bins
data.bin <- cut(data, bins)
# take a look at
barplot(table(data.bin))
# take a look at
plot(1)
barplot(table(data.bin))
plot(data.bin)
barplot(table(data.bin))
table(data.bin)
hist(data.bin)
hist(data)
# We want only bins of 0.5 cm
bins <- seq(1,10,by = 0.5)
# bundle the data in bins
data.bin <- cut(data, bins)
plot(data.bin)
barplot(table(data.bin))
hist(data)
barplot(table(data.bin))
hist(data)
data <- iris
# colored bars and pies
barplot(table(data$Sepal.Length), col = my.color)
pie(table(data$Species),col = my.color)
# colored and labeled historgram
hist(iris$Sepal.Length,    # apply the hist function
col=my.color,     # set the color palette
main="Sepal length of the Iris flower", # the main title
xlab="cm",
ylab ="Counts" )       # x-axis label
# Check colors()
colors()
my.color <-  c("tomato3" ,"wheat2","ivory", "salmon2" ,"peachpuff4",
"plum2" ,"blanchedalmond")
# colored bars and pies
barplot(table(data$Sepal.Length), col = my.color)
pie(table(data$Species),col = my.color)
# colored and labeled historgram
hist(iris$Sepal.Length,    # apply the hist function
col=my.color,     # set the color palette
main="Sepal length of the Iris flower", # the main title
xlab="cm",
ylab ="Counts" )       # x-axis label
data <- iris
source('~/temp/RTutorial/RTutorial/Tutorial_sol/10_HowToPlot.R', echo=TRUE)
source('~/temp/RTutorial/RTutorial/Tutorial_sol/10_HowToPlot.R', echo=TRUE)
c(1,2,3)
cumsum(c(1,2,3))
hist(data)
data <- iris$Sepal.Length
# Check the range
range(data)
# We want only bins of 0.5 cm
bins <- seq(1,10,by = 0.5)
plot(data.bin)
barplot(table(data.bin))
hist(data)
# bundle the data in bins
data.bin <- cut(data, bins)
cumsum(data)
plot(cumsum(data))
plot(cumsum(table(data)))
stem(data)
# Take the build-in data 'iris'
data <- iris
stem(data)
stem(data$Species)
stem(table(data$Species))
freq <- table(data$Species)
freq.PL <- table(data$Petal.Length)
plot(freq)
barplot(freq)
pie(freq)
boxplot(data)
boxplot(data$Sepal.Length)
summary(data$Sepal.Length)
boxplot(data$Sepal.Length, horizontal = TRUE, names = 'Sepal')
boxplot(data$Sepal.Length, horizontal = TRUE, plot = 'a')
boxplot(data$Sepal.Length, horizontal = TRUE, plot = TRUE)
boxplot(data$Sepal.Length, horizontal = TRUE)
summary(data$Sepal.Length)
boxplot(data$Sepal.Length, horizontal = TRUE)
# Use the build-in functions mean(), var() and sd() on the Sepal.Length
c('mean' = mean(data$Sepal.Length),'var' = var(data$Sepal.Length),'sd' = sd(x = data$Sepal.Length) )
# Use the build-in functions mean(), var() and sd() on the Sepal.Length
c('mean' = mean(data$Sepal.Length),'var' = var(data$Sepal.Length),
'sd' = sd(x = data$Sepal.Length)^2 )
# Look again at
plot(data)
cov(data)
cov(data$Petal.Length,data$Petal.Width)
cor(data$Petal.Length,data$Petal.Width)
lm(data = data)
result <- lm(data = data)
result
result <- lm(data = data.frame(data$Petal.Length,data$Petal.Width))
result
plot(result)
print(result)
plot(result)
predict(result, seq(0,3,by=0.1))
predict(result, as.data.frame(seq(0,3,by=0.1)))
result <- lm(data = data.frame(data$Petal.Length,data$Petal.Width))
predict(result, as.data.frame(seq(0,3,by=0.1)))
print(result)
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(result)
abline(1,2)
result$coefficients
plot(data$Petal.Length ~ data$Sepal.Width)
plot(data$Petal.Length , data$Sepal.Width)
plot(data$Petal.Length ~ data$Sepal.Width)
abline(result$coefficients[1],result$coefficients[2])
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length , data$Sepal.Width)
abline(result$coefficients[1],result$coefficients[2])
abline(result$coefficients[2],result$coefficients[1])
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length , data$Sepal.Width)
abline(result$coefficients[2],result$coefficients[1])
plot(data$Petal.Length ~ data$Sepal.Width)
abline(result$coefficients[2],result$coefficients[1])
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length ~ data$Sepal.Width)
abline(result$coefficients[2],result$coefficients[1])
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length ~ data$Sepal.Width)
abline(result$coefficients[1],result$coefficients[2])
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length ~ data$Petal.Width)
abline(result$coefficients[1],result$coefficients[2])
# Do the linear regression using lm()
# Note: A ~ B means A against B, i.e. A on the y-axis and B on the x-axis
result <- lm(formula = data$Petal.Length ~ data$Petal.Width)
plot(data$Petal.Length ~ data$Petal.Width)
abline(result$coefficients[1],result$coefficients[2])
# in doubt
?lm
help(lm)
result <- lm(formula = Petal.Length ~ Petal.Width, data = data)
plot(data$Petal.Length ~ data$Petal.Width)
abline(result$coefficients[1],result$coefficients[2])
# Do the linear regression using lm()
# Note: A ~ B means A against B, i.e. A on the y-axis and B on the x-axis
result <- lm(formula = Petal.Length ~ Petal.Width)#, data = data)
# Do the linear regression using lm()
# Note: A ~ B means A against B, i.e. A on the y-axis and B on the x-axis
result <- lm(formula = Petal.Length ~ Petal.Width, data = data)
plot(data$Petal.Length ~ data$Petal.Width)
abline(result$coefficients[1],result$coefficients[2])
summary(result)
# see also
summary(result)
data <- iris
plot(data)
tapply(data$Petal.Width ,data$Species, FUN = mean)
mean(data$Petal.Width)
mean(data$Sepal.Length)
tapply(data$Sepal.Length ,data$Species, FUN = mean)
mean(data$Petal.Width)
tapply(data$Petal.Width ,data$Species, FUN = mean)
sd(data$Petal.Width)
tapply(data$Petal.Width ,data$Species, FUN = sd)
mean(data$Petal.Width)
tapply(data$Petal.Width ,data$Species, FUN = mean)
mean(data$Petal.Length)
tapply(data$Petal.Length ,data$Species, FUN = mean)
sd(data$Petal.Length)
tapply(data$Petal.Length ,data$Species, FUN = sd)
# Look again at
plot(data)
cov(data$Petal.Length,data$Petal.Width)
cor(data$Petal.Length,data$Petal.Width)
summary(data$Sepal.Length)
boxplot(data$Sepal.Length, horizontal = TRUE)
# Do the linear regression using lm()
# Note: A ~ B means A against B, i.e. A on the y-axis and B on the x-axis
result <- lm(formula = Petal.Length ~ Petal.Width, data = data)
plot(data$Petal.Length ~ data$Petal.Width)
abline(result$coefficients[1],result$coefficients[2])
# see also
summary(result)
?lm
data()
data <- Orange
plot(data)
write.table(data, "data/oranges.txt", sep = "\t")
library()
# if not installed, install it
install.packages('jsonlite')
?jsonlite
??jsonlite
jsonlite
?jsonlite::
#############################
# 8.1 Read Data             #
#############################
#############################
# 8.1 Basic Data Types      #
#     and Exmaples          #
#############################
write.table(data, "data/oranges.txt", sep = "\t")
jsonlite::write_json(data, "data/oranges")
jsonlite::write_json(data, "data/oranges.json")
write.table(data, "data/oranges.csv", sep = ",")
data <- read.csv(file = "data/oranges.txt",sep = "\t" )
q
data <- read.csv(file = "data/oranges.txt",sep = "\t" )
data
data <- read.csv(file = "data/oranges.txt",sep = "\t" , header = FALSE)
data
is.data.frame(data)
data <- read.csv(file = "data/oranges.txt",sep = "\t" , header = TRUE)
is.data.frame(data)
data <- read.csv(file = "data/oranges.csv",sep = "," , header = FALSE)
data <- read.csv(file = "data/oranges.csv",sep = ",")
data
data$Tree
data <- jsonlite::read_json("data/oranges.json")
data
data <- jsonlite::read_json("data/oranges.json",simplifyVector = TRUE)
data
data
data <- iris
anova(data)
?anova
model <- lm(formula = Petal.Length ~ Petal.Width, data = data)
plot(data$Petal.Length ~ data$Petal.Width)
model <- lm(formula = Petal.Length ~ Petal.Width, data = data)
anova(model)
plot(data$Petal.Length ~ data$Species)
model <- lm(formula = Petal.Length ~ Species, data = data)
anova(model)
model <- aov(formula = Petal.Length ~ Species, data = data)
anova(model)
?aov
model <- aov(formula = Petal.Length ~ Species + Petal.Width, data = data)
anova(model)
plot(data$Petal.Length ~ data$Species + data$Petal.Width)
plot(data$Petal.Length ~ data$Species + data$Petal.Width)
summary(model)
anova(model)
model <- aov( data = data)
model <- aov(formula = Petal.Length ~ Species + Petal.Width, data = data)
anova(model)
print(model)
plot(model)
data <- iris
plot(data$Petal.Length ~ data$Species)
model <- aov(formula = Petal.Length ~ Species, data = data)
plot(model)
