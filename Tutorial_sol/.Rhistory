print(song1)
setClass(Class = "classname" ,
representation(attr1 = 'numeric',
attr2 = 'character'),
prototype(attr1 = NA_real_, attr2 = NA_character_)
)
test <- classname()
test <- new(classname)
test <- new('classname')
test
setClass(Class = "MyClass" ,
representation(attr1 = 'numeric',
attr2 = 'character'),
prototype(attr1 = NA_real_, attr2 = NA_character_)
)
testobject <- new('MyClass')
print(testobject)
print(getSlots(testobject))
print(getSlots('testobject'))
print(getSlots('MyClass'))
song <- function(title, composer, genre, year, artist) {
UseMethod('song')
}
song.default <- function(title = NA_character_, composer = NA_character_,
genre = NA_character_ , year = NA_integer_,
artist = NA_character_) {
mysong <- list('title' = title, 'composer' = composer,
'genre' = genre , 'year' = year,
'artist' = artist)
class(mysong) <- 'song'
return(mysong)
}
song.pop <- function(title, composer,
genre = 'pop' , year = 2018,
artist) {
mysong <- song.default('title' = title, 'composer' = composer,
'genre' = genre , 'year' = year,
'artist' = artist)
return(mysong)
}
song1 <- song.pop()
song.pop <- function(title, composer,
genre = 'pop' , year = 2018,
artist) {
mysong <- song.default('genre' = genre , 'year' = year)
return(mysong)
}
song1 <- song.pop()
song1
print(song1)
setClass(Class = "Song" ,
representation(title = 'character',
composer = 'character',
genre = 'character',
year = 'integer',
artist = 'character'),
prototype(title = NA_character_,
composer = NA_character_,
genre = NA_character_,
year = NA_integer_,
artist = NA_character_)
)
song1 <- new('Song')
song1
source('https://www.youtube.com/')
source('http://www.youtube.com/')
browseURL('http://www.youtube.com/')
# clear the Global Environment
rm(list=ls())
song1 <- list('title' = 'Let It Be', 'composer' = 'Paul McCartney',
'genre' = 'Rock Ballade' , 'year' = 1970,
'artist' = 'The Beatles',
'link' = 'https://www.youtube.com/watch?v=2xDzVZcqtYI')
song2 <- list('title' = 'Highway to Hell',
'composer' = 'Angus Young, Malcolm Young and Bon Scott',
'genre' = 'Hard Rock' , 'year' = 1979,
'artist' = 'AC/DC',
'link' = 'https://www.youtube.com/watch?v=l482T0yNkeo')
# Check the class of song1
print(class(song1))
# We define the class 'song' implicitly.
attr(song1, 'class') <- 'song'
class(song2) <- 'song'
print(class(song1))
# Try methods(print). You will see all classes, for which print() is
# defined.
methods(print)
# We now define print() for the class 'song'
print.song <- function(mysong) {
paste(mysong$title, 'is a',mysong$genre,'song by', paste(mysong$artist,'.',sep='')
, sep = ' ')
}
is.song <- function(mysong) {
if (class(mysong) == 'song') {
return(TRUE)
} else {
return(FALSE)
}
}
play.song <- function(mysong)
play.song <- function(mysong) {
browseURL(mysong$link)
}
play(song1)
play.song(song1)
# clear the Global Environment
rm(list=ls())
song1 <- list('title' = 'Let It Be', 'composer' = 'Paul McCartney',
'genre' = 'Rock Ballade' , 'year' = 1970,
'artist' = 'The Beatles',
'link' = 'https://www.youtube.com/watch?v=2xDzVZcqtYI')
song2 <- list('title' = 'Highway to Hell',
'composer' = 'Angus Young, Malcolm Young and Bon Scott',
'genre' = 'Hard Rock' , 'year' = 1979,
'artist' = 'AC/DC',
'link' = 'https://www.youtube.com/watch?v=l482T0yNkeo')
# Check the class of song1
print(class(song1))
class(song2) <- 'song'
# We define the class 'song' implicitly.
attr(song1, 'class') <- 'song'
print(class(song1))
# Try methods(print). You will see all classes, for which print() is
# defined.
methods(print)
# We now define print() for the class 'song'
print.song <- function(mysong) {
paste(mysong$title, 'is a',mysong$genre,'song by', paste(mysong$artist,'.',sep='')
, sep = ' ')
}
get_artist <- function(object) {
UseMethod('get_artist')
}
get_artist.song <- function(object) {
return(object$artist)
}
song1
get_artist(song1)
# 2)
play <- function(object) {
UseMethod('play')
}
play.song <- function(mysong) {
browseURL(mysong$link)
}
play(song1)
setClass(Class = "Song" ,
representation(title = 'character',
composer = 'character',
genre = 'character',
year = 'integer',
artist = 'character',
link = 'character'),
prototype(title = NA_character_,
composer = NA_character_,
genre = NA_character_,
year = NA_integer_,
artist = NA_character_,
link = NA_character_)
)
song1 <- new('Song', title = 'Let It Be', composer = 'Paul McCartney',
genre = 'Rock Ballade' , year = 1970,
artist = 'The Beatles',
link = 'https://www.youtube.com/watch?v=2xDzVZcqtYI')
song1 <- new('Song', title = 'Let It Be', composer = 'Paul McCartney',
genre = 'Rock Ballade' , year = as.integer(1970),
artist = 'The Beatles',
link = 'https://www.youtube.com/watch?v=2xDzVZcqtYI')
song1
play(song1)
setMethod('play', function(object)) {
browseURL(object@link)
}
setMethod('play', function(object) {
browseURL(object@link)
}
}
song1 <- new('Song', title = 'Let It Be', composer = 'Paul McCartney',
genre = 'Rock Ballade' , year = as.integer(1970),
artist = 'The Beatles',
link = 'https://www.youtube.com/watch?v=2xDzVZcqtYI')
play(song1)
setMethod('play', function(object) {
browseURL(object@link)
}
)
setMethod('play',signature = 'Song' ,function(object) {
browseURL(object@link)
}
)
play(song1)
source('4_Classes.R')
# clear the Global Environment
rm(list=ls())
source('4_Classes.R')
source('data/myscript.R')
source('data/myscript.R')
source('data\myscript.R')
source('myscript.R')
source('data/myscript.R')
source('4_Classes.R')
source('data/myscipt.R')
source('data/myscript.R')
# clear the Global Environment
rm(list=ls())
source('data/myscript.R')
# clear the Global Environment
rm(list=ls())
source('data/myscript.R')
play(song1)
install.packages('json')
install.packages('jsonlite')
library(jsonlite)
jsonlite::toJSON(randu)
jsonlite::write_json( x = randu ,path = 'data/mydata')
'test'
'test'[1]
'test'[2]
as.vector('test')
class('test')
typeof('test')
cat('test')
readLines(n=1)
word <- readLines(n=1)
strsplit(word)
strsplit(x = word)
strsplit(x = word, split = NULL)
x <- NULL
x
y <- NULL
# NULL
y <- NULL
# NULL
y <- NULL
# NULL
y <- NULL
# NULL
y <- NULL
# NULL
y <- NULL
y <- NULL
mode(x)
A <- TRUE
B <- FALSE
A
B
mode(A)
1 + NULL
1 + z
A & B
A | B
x <- 7
mode(x)
y <- x
z
2a
a2
mode
mode <- 1
mode
y <- 3.1
is.integer(x)
as.integer(x)
x <- as.integer(x)
is.integer(x)
class(7)
class(as.integer(7))
typeof(7)
x <- 5L
z <- 2 + 5i
word1 <- 'one'
word2 <- 'two'
mode(word1)
word3 = paste(word1, word2)
sub('wo', 'hree', w)
sub('wo', 'hree', word3)
word3
word4 <- sub('wo', 'hree', word3)
x <- 3
y <- 4
x+y
x-y
y * x
x / y
x^2
x**2
x == y
x < y
x <= y
x >= y
x |# y
q
x | y
x & y
x | 'test'
x <- 3
y <- 'Hans'
x & y
x == y
x & y
x > y
x < y
length(y)
if (A) {
print('Hello world!')
}
if (A) {
if (B) {
print('yes')
} else {        # syntax !
print('no')
}
if (B) {
print('yes')
}
else
{        # syntax !
print('no')
}
if (B) {
print('yes')
} else {        # syntax !
print('no')
}
A <- TRUE
B <- FALSE
if (A) {
print('Hello world!')
}
if (B) {
print('yes')
} else {        # syntax !
print('no')
}
q
)
if (B) {
print('yes')
} else {        # syntax !
print('no')
}
if (x = y) {
print('Hello world!')
}
a = 2
for ( k in (1:10) ) {
print(paste('step', k))
}
n <- 7.25
if (is.integer(n)) {
} else {
print('Error: n is not integer')
}
n <- 7.25
n <- as.integer(n)
3:!
q
3:1
?<
help(<)
# clear the Global Environment
rm(list=ls())
x <- c(1,2,3,4)
y <- 1:4
z <- rep(1,10)
words <- c('This', 'is', 'a', 'sentence', '.')
mixed.vector1 <- c(TRUE, 3.1)
mixed.vector2 <- c(TRUE, 'word', 3.7)
y <- c(mixed.vector1, mixed.vector2)
# Try to do basic operations and comparisons with vectors.
x <- c(2,4)
y <- c(1,2)
x
y
x+y
x * y
x == y
x
y
x <- c(TRUE, FALSE)
y <- c(FALSE,FALSE)
x & y
x & Y
x & y
x && y
x <- c(TRUE, FALSE)
y <- c(FALSE, FALSE)
x & y
x && y
# Try to do basic operations and comparisons with vectors.
x <- c(2,4)
y <- c(1,2)
x < y
x > y
x == <
x == y
x <- 4:15
y <- c(1,-1)
x.alternating <- x * y
x.alternating[2]
x.alternating[c(2,4,6)]
x.alternating
'word'
x.alternating[1] <- 'word'
x.alternating
length(x.alternating)
x <- c()
y <- numeric(0)
x
y
data <- rnorm(n = 1000, mean = 5, sd = 2)
plot(data)
data <- rnorm(n = 1000, mean = 5, sd = 2)
# 1)
mean <- 0
for (var in data) {
mean <- mean + var
}
data <- rnorm(n = 1000, mean = 5, sd = 2)
res <- 0
for (var in data) {
res <- res + var
}
res <- res / length(data)
mean(data)
values <- c(mean, std, relative.number)
names <- c('mean', 'std', 'rel num')
results <- values
names(results) = names
A <- matrix( rep(TRUE,20), nrow = 5, ncol = 4)
A
rep(TRUE, 20)
c(TRUE,TRUE)
B <- matrix(c(1,'word', TRUE, 3.1), nrow = 2)
B
length(A)
B[1,2]
#Note
is.vector(B[1,])
A <- matrix( rep(TRUE,20) , nrow = 5, ncol = 4)
B <- matrix(c(1,'word', TRUE, 3.1), nrow = 2)
C <- c(TRUE,FALSE)
A
C
A * C
C * A
A <- matrix( rnorm(n = 6), nrow = 2)
names <- c('x1', 'x2', 'x3')
value <- 3
data <- list( 'matrix' = A, 'names' = names, 'value' = value, 'object' = NULL)
data
data$matrix
data$matrix[1,2]
data <- mtcars
print(data)
A
df <- as.data.frame(A)
df
A
df1 <- as.data.frame(A)
df2 <- as.data.frame(B)
df1
df2
newdf <- cbind.data.frame(A, B)
newdf
# clear the Global Environment
rm(list=ls())
TestFunction <- function(word) {
print(word)
return(NULL)
}
# A 'function call' activates a function.
output <- TestFunction(word = 'Hello World!')
data <- list()
for (i in 1:5) {
data[[paste('y', as.character(i), sep = '')]] <- matrix(
data = rnorm(n = 8**2, mean = i, sd = 0.1 * i), ncol = 8)
}
data
data$y2
length(data)
data
names(data)
labels <- names(data)
result <- data.frame(row.names = labels)
result
labels <- names(data)
result <- data.frame(row.names = labels, 'mean' = rep(0,length(data))) )
labels <- names(data)
result <- data.frame(row.names = labels, 'mean' = rep(0,length(data)) )
result
MyFunction <- function( data , k ) {
labels <- names(data)
result <- data.frame(row.names = labels, 'mean' = rep(0,length(data)) )
for (j in 1:length(data)) {
mat <- data[[j]]
column <- mat[,k]
result$mean[j] <- mean(column)
}
}
MyFunction <- function( data , k ) {
labels <- names(data)
result <- data.frame(row.names = labels, 'mean' = rep(0,length(data)) )
for (j in 1:length(data)) {
mat <- data[[j]]
column <- mat[,k]
result$mean[j] <- mean(column)
}
return(result)
}
MyFunction(data , 1)
MyFunction(data , 2)
